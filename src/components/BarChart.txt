import createBarChart from "lib/createBarChart";
import drawImage from "lib/drawImage";
import React from "react";

export interface BarChartProps {
	readonly barWidth?: number;
	readonly className?: string;
	readonly color?: string;
	readonly gap?: number;
	readonly size: number;
	readonly values: number[];
}

export interface BarChartBar {
	readonly index: number;
	readonly x1: number;
	readonly x2: number;
	readonly y1: number;
	readonly y2: number;
	readonly mouseOverInfo?: string;
}

export interface BarChartSpec {
	readonly width: number;
	readonly height: number;
	readonly bars: readonly BarChartBar[];
	readonly highlightedIndex?: number;
}

export function BarChart({
	barWidth = 20,
	className,
	color,
	gap = 0,
	size,
	values,
}: BarChartProps): JSX.Element {
	const height = size;
	const width = (values.length - 1) * (barWidth + gap) + barWidth;
	const ref = React.useRef<HTMLCanvasElement>(null);

	const barChartSpec = React.useMemo(() =>
		makeBarChartSpec(...)
	, [...])

	const canvasElem = React.useMemo(() => 
		makeCanvasFromBarChart(barChartSpec)
	, []);

	React.useEffect(() => {
		if (ref.current) {
		renderBarChartToCanvas(barChartSpec, ref.current)
		}
	}, [ref, barChartSpec])

	React.useEffect(() => {
		const component = createBarChart({ barWidth, color, gap, height, values, width });
		const container = ref.current;
		const context = container?.getContext("2d");

		if (component && container && context) {
			context.clearRect(0, 0, container.width, container.height);
			drawImage({ component, container });
		}
	}, [barWidth, color, gap, height, size, values, width]);



	return <canvas className={className} height={height} ref={ref} width={width} />;
}

function makeBarChartSpec(...): BarChartSpec;

function makeCanvasFromBarChart(spec: BarChartSpec): HTMLCanvasElement {
	return <canvas className={className} height={height} ref={ref} width={width} />
}

function renderBarChartToCanvas(spec: BarChartSpec, canvas: ...): void {

}